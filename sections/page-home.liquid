<div class="db-page db-page--home">

  <div class="spotify-backdrop">
    {% comment %} <div class="spotify-wrapper" @click="togglePlay">
        <div class="nowPlayingCard">
          
          <div class='nowPlayingImage'>
            <a v-if="playerState === 'PLAY' || playerState === 'PAUSE'" :href="music_player.songUrl">
              <img :src="albumImageUrl" alt="Album" />
            </a>
            <img v-else :src="albumImageUrl" alt="">
          </div>

          <div class="nowPlayingDetails">
            <div class="nowPlayingTitle" :class="{'playlistName': title && title.length > 15 ? true : false }">
              <a v-if="playerState === 'PLAY' || playerState === 'PAUSE'" :href="music_player.songUrl" v-text="title">
              </a>
              <div v-else class="text" v-text="title"></div>
            </div>
            
            <div class="nowPlayingArtist">
              <a v-if="playerState === 'PLAY' || playerState === 'PAUSE'" :href="music_player.artistUrl" v-text="artist">
              </a>
              <div v-else class="text" v-text="artist"></div>
            </div>

            <div class="nowPlayingTime" v-text="playingTime()">
            </div>
          </div>

          <div class="nowPlayingState">

          </div>
        </div>
    </div> {% endcomment %}

    <div class="spotify-login" v-if="is_active === false" @click="login2">
      <div class="spotify-wrap-login">
        <div class="spotify">
          <svg xmlns="http://www.w3.org/2000/svg" width="63" height="63" viewBox="0 0 63 63" fill="none" class="db-svg">
            <circle cx="31.6999" cy="31.6998" r="26.7" fill="black"/>
            <path d="M50.085 28.035C40.005 22.05 23.1525 21.42 13.545 24.4125C11.97 24.885 10.395 23.94 9.9225 22.5225C9.45 20.9475 10.395 19.3725 11.8125 18.9C22.995 15.5925 41.4225 16.2225 53.0775 23.1525C54.495 23.94 54.9675 25.83 54.18 27.2475C53.3925 28.35 51.5025 28.8225 50.085 28.035ZM49.77 36.855C48.9825 37.9575 47.565 38.43 46.4625 37.6425C37.9575 32.445 25.0425 30.87 15.12 34.02C13.86 34.335 12.4425 33.705 12.1275 32.445C11.8125 31.185 12.4425 29.7675 13.7025 29.4525C25.2 25.9875 39.375 27.72 49.14 33.705C50.085 34.1775 50.5575 35.7525 49.77 36.855ZM45.99 45.5175C45.36 46.4625 44.2575 46.7775 43.3125 46.1475C35.91 41.58 26.6175 40.635 15.5925 43.155C14.49 43.47 13.545 42.6825 13.23 41.7375C12.915 40.635 13.7025 39.69 14.6475 39.375C26.6175 36.6975 37.0125 37.8 45.2025 42.84C46.305 43.3125 46.4625 44.5725 45.99 45.5175ZM31.5 0C27.3634 0 23.2672 0.814772 19.4455 2.39779C15.6237 3.98082 12.1512 6.30109 9.22614 9.22614C3.31874 15.1335 0 23.1457 0 31.5C0 39.8543 3.31874 47.8665 9.22614 53.7739C12.1512 56.6989 15.6237 59.0192 19.4455 60.6022C23.2672 62.1852 27.3634 63 31.5 63C39.8543 63 47.8665 59.6813 53.7739 53.7739C59.6813 47.8665 63 39.8543 63 31.5C63 27.3634 62.1852 23.2672 60.6022 19.4455C59.0192 15.6237 56.6989 12.1512 53.7739 9.22614C50.8488 6.30109 47.3763 3.98082 43.5545 2.39779C39.7328 0.814772 35.6366 0 31.5 0Z" fill="#1ED760"/>
          </svg>
        </div>

        <div class="spotify-db">
          Unleash your DEADBEAT Playlist
        </div>
      </div>
    </div>
    <div class="spotify-player" v-else>
      <div class="spotify-music-moving" v-if="is_paused === false" @click="togglePlay">
        <span></span>
        <span></span>
        <span></span>
        <span></span>
        <span></span>
      </div>
      <div class="spotify-pause" v-else @click="togglePlay">
        <svg xmlns="http://www.w3.org/2000/svg" width="63" height="63" viewBox="0 0 63 63" fill="none">
          <circle cx="31.6999" cy="31.6998" r="26.7" fill="black"/>
          <path d="M50.085 28.035C40.005 22.05 23.1525 21.42 13.545 24.4125C11.97 24.885 10.395 23.94 9.9225 22.5225C9.45 20.9475 10.395 19.3725 11.8125 18.9C22.995 15.5925 41.4225 16.2225 53.0775 23.1525C54.495 23.94 54.9675 25.83 54.18 27.2475C53.3925 28.35 51.5025 28.8225 50.085 28.035ZM49.77 36.855C48.9825 37.9575 47.565 38.43 46.4625 37.6425C37.9575 32.445 25.0425 30.87 15.12 34.02C13.86 34.335 12.4425 33.705 12.1275 32.445C11.8125 31.185 12.4425 29.7675 13.7025 29.4525C25.2 25.9875 39.375 27.72 49.14 33.705C50.085 34.1775 50.5575 35.7525 49.77 36.855ZM45.99 45.5175C45.36 46.4625 44.2575 46.7775 43.3125 46.1475C35.91 41.58 26.6175 40.635 15.5925 43.155C14.49 43.47 13.545 42.6825 13.23 41.7375C12.915 40.635 13.7025 39.69 14.6475 39.375C26.6175 36.6975 37.0125 37.8 45.2025 42.84C46.305 43.3125 46.4625 44.5725 45.99 45.5175ZM31.5 0C27.3634 0 23.2672 0.814772 19.4455 2.39779C15.6237 3.98082 12.1512 6.30109 9.22614 9.22614C3.31874 15.1335 0 23.1457 0 31.5C0 39.8543 3.31874 47.8665 9.22614 53.7739C12.1512 56.6989 15.6237 59.0192 19.4455 60.6022C23.2672 62.1852 27.3634 63 31.5 63C39.8543 63 47.8665 59.6813 53.7739 53.7739C59.6813 47.8665 63 39.8543 63 31.5C63 27.3634 62.1852 23.2672 60.6022 19.4455C59.0192 15.6237 56.6989 12.1512 53.7739 9.22614C50.8488 6.30109 47.3763 3.98082 43.5545 2.39779C39.7328 0.814772 35.6366 0 31.5 0Z" fill="#1ED760"/>
        </svg>
      </div>

      <div class="spotify-content">
        <div class="trackName-container">
          <div class="marquee">
            <span v-text="track?.album?.name"></span>
          </div>
        </div>

        <div class="artist-container">
          <div class="artistInfo">
            <span v-text="track?.artists[0].name"></span>
          </div>
        </div>
      </div>
    </div>
  </div>

  <section class="db-section db-section--banner">
    <div class="db-bg-wrap">
      <video class="db-bg-video"
        id=""
        poster=""
        src="{{ 'DB_bg-radio-station.mp4' | asset_url }}"
        autoplay="true"
        muted
        loop>
      </video>
    </div>
    <div class="db-container">
      <div class="db-row">
        <div class="db-col">
          <h1>
            <span>Welcome to the</span>
            <span>DEADBEAT&nbsp;</span>
            <span>world</span>
          </h1>
          <p>
            Welcome to the story of deadbeat underworld. A post-apocalyptic world devoid of the living.
          </p>
          <div class="db-qr-wrap">
            <svg class="db-qr-code db-svg"
              width="122"
              height="122"
              viewBox="0 0 122 122"
              fill="none"
              xmlns="http://www.w3.org/2000/svg">
              <path id="path_01"
                d="M33 41.7003V49.4003H40.7H48.4V41.7003V34.0003H40.7H33V41.7003ZM46.2 41.7003V47.2003H40.7H35.2V41.7003V36.2003H40.7H46.2V41.7003Z"
                fill="#E3C3E6">
              </path>
              <path id="path_02"
                d="M37.4001 41.7002V45.0002H40.7001H44.0001V41.7002V38.4002H40.7001H37.4001V41.7002Z"
                fill="#B1FF29">
              </path>
              <path id="path_03"
                d="M52.8 35.1V36.2H51.7H50.6V38.4V40.6H51.7H52.8V41.7V42.8H51.7H50.6V47.2V51.6H48.4H46.2V52.7V53.8H44H41.8V52.7V51.6H40.7H39.6V52.7V53.8H38.5H37.4V52.7V51.6H35.2H33V57.1V62.6H36.3H39.6V61.5V60.4H38.5H37.4V59.3V58.2H40.7H44V59.3V60.4H45.1H46.2V61.5V62.6H47.3H48.4V61.5V60.4H49.5H50.6V61.5V62.6H51.7H52.8V63.7V64.8H53.9H55V65.9V67H53.9H52.8V68.1V69.2H51.7H50.6V67V64.8H47.3H44V63.7V62.6H42.9H41.8V63.7V64.8H39.6H37.4V65.9V67H36.3H35.2V65.9V64.8H34.1H33V65.9V67H34.1H35.2V68.1V69.2H34.1H33V70.3V71.4H36.3H39.6V70.3V69.2H38.5H37.4V68.1V67H39.6H41.8V69.2V71.4H42.9H44V70.3V69.2H45.1H46.2V70.3V71.4H48.4H50.6V73.6V75.8H51.7H52.8V76.9V78H53.9H55V79.1V80.2H52.8H50.6V81.3V82.4H51.7H52.8V83.5V84.6H51.7H50.6V86.8V89H55H59.4V87.9V86.8H61.6H63.8V87.9V89H67.1H70.4V87.9V86.8H71.5H72.6V85.7V84.6H74.8H77V83.5V82.4H78.1H79.2V84.6V86.8H78.1H77V87.9V89H79.2H81.4V86.8V84.6H82.5H83.6V86.8V89H85.8H88V85.7V82.4H86.9H85.8V83.5V84.6H84.7H83.6V83.5V82.4H81.4H79.2V80.2V78H80.3H81.4V79.1V80.2H83.6H85.8V79.1V78H86.9H88V75.8V73.6H85.8H83.6V74.7V75.8H82.5H81.4V74.7V73.6H80.3H79.2V71.4V69.2H78.1H77V68.1V67H79.2H81.4V65.9V64.8H82.5H83.6V65.9V67H85.8H88V62.6V58.2H86.9H85.8V59.3V60.4H83.6H81.4V62.6V64.8H80.3H79.2V63.7V62.6H78.1H77V61.5V60.4H78.1H79.2V59.3V58.2H81.4H83.6V57.1V56H84.7H85.8V53.8V51.6H83.6H81.4V52.7V53.8H82.5H83.6V54.9V56H81.4H79.2V53.8V51.6H75.9H72.6V53.8V56H71.5H70.4V54.9V53.8H68.2H66V52.7V51.6H64.9H63.8V50.5V49.4H64.9H66V48.3V47.2H67.1H68.2V48.3V49.4H69.3H70.4V48.3V47.2H69.3H68.2V46.1V45H67.1H66V46.1V47.2H64.9H63.8V48.3V49.4H62.7H61.6V48.3V47.2H60.5H59.4V46.1V45H58.3H57.2V46.1V47.2H56.1H55V46.1V45H53.9H52.8V43.9V42.8H56.1H59.4V41.7V40.6H60.5H61.6V42.8V45H62.7H63.8V41.7V38.4H64.9H66V40.6V42.8H68.2H70.4V39.5V36.2H69.3H68.2V35.1V34H66H63.8V35.1V36.2H62.7H61.6V35.1V34H60.5H59.4V35.1V36.2H58.3H57.2V37.3V38.4H55H52.8V37.3V36.2H53.9H55V35.1V34H53.9H52.8V35.1ZM68.2 37.3V38.4H67.1H66V37.3V36.2H67.1H68.2V37.3ZM55 48.3V49.4H56.1H57.2V48.3V47.2H58.3H59.4V49.4V51.6H60.5H61.6V53.8V56H62.7H63.8V58.2V60.4H64.9H66V58.2V56H68.2H70.4V57.1V58.2H71.5H72.6V59.3V60.4H73.7H74.8V61.5V62.6H73.7H72.6V65.9V69.2H71.5H70.4V68.1V67H69.3H68.2V69.2V71.4H67.1H66V70.3V69.2H64.9H63.8V68.1V67H62.7H61.6V64.8V62.6H62.7H63.8V61.5V60.4H61.6H59.4V61.5V62.6H56.1H52.8V61.5V60.4H51.7H50.6V59.3V58.2H49.5H48.4V59.3V60.4H47.3H46.2V59.3V58.2H45.1H44V57.1V56H45.1H46.2V54.9V53.8H48.4H50.6V52.7V51.6H52.8H55V50.5V49.4H53.9H52.8V48.3V47.2H53.9H55V48.3ZM37.4 56V58.2H36.3H35.2V56V53.8H36.3H37.4V56ZM77 54.9V56H78.1H79.2V57.1V58.2H78.1H77V57.1V56H75.9H74.8V54.9V53.8H75.9H77V54.9ZM85.8 63.7V64.8H84.7H83.6V63.7V62.6H84.7H85.8V63.7ZM59.4 67V69.2H60.5H61.6V70.3V71.4H62.7H63.8V72.5V73.6H64.9H66V74.7V75.8H67.1H68.2V76.9V78H66H63.8V79.1V80.2H64.9H66V81.3V82.4H64.9H63.8V81.3V80.2H62.7H61.6V79.1V78H60.5H59.4V76.9V75.8H58.3H57.2V76.9V78H56.1H55V76.9V75.8H53.9H52.8V72.5V69.2H53.9H55V68.1V67H56.1H57.2V65.9V64.8H58.3H59.4V67ZM77 65.9V67H75.9H74.8V65.9V64.8H75.9H77V65.9ZM48.4 68.1V69.2H47.3H46.2V68.1V67H47.3H48.4V68.1ZM77 74.7V78H73.7H70.4V74.7V71.4H73.7H77V74.7ZM57.2 83.5V86.8H55H52.8V85.7V84.6H53.9H55V82.4V80.2H56.1H57.2V83.5ZM74.8 81.3V82.4H73.7H72.6V83.5V84.6H71.5H70.4V85.7V86.8H67.1H63.8V85.7V84.6H66H68.2V83.5V82.4H70.4H72.6V81.3V80.2H73.7H74.8V81.3Z"
                fill="#E3C3E6">
              </path>
              <path id="path_04"
                d="M55 53.8001V56.0001H52.8H50.6V57.1001V58.2001H53.9H57.2V57.1001V56.0001H58.3H59.4V54.9001V53.8001H58.3H57.2V52.7001V51.6001H56.1H55V53.8001Z"
                fill="#E3C3E6">
              </path>
              <path id="path_05"
                d="M46.1999 57.1001V58.2001H47.2999H48.3999V57.1001V56.0001H47.2999H46.1999V57.1001Z"
                fill="#E3C3E6">
              </path>
              <path id="path_06"
                d="M68.2 59.2999V60.3999H69.3H70.4V61.4999V62.5999H69.3H68.2V63.6999V64.7999H69.3H70.4V63.6999V62.5999H71.5H72.6V61.4999V60.3999H71.5H70.4V59.2999V58.1999H69.3H68.2V59.2999Z"
                fill="#E3C3E6">
              </path>
              <path id="path_07"
                d="M63.7999 63.6999V64.7999H64.8999H65.9999V63.6999V62.5999H64.8999H63.7999V63.6999Z"
                fill="#E3C3E6">
              </path>
              <path id="path_08"
                d="M57.2001 70.3V71.4H58.3001H59.4001V70.3V69.2H58.3001H57.2001V70.3Z"
                fill="#E3C3E6">
              </path>
              <path id="path_09"
                d="M61.5998 75.7998V77.9998H62.6998H63.7998V75.7998V73.5998H62.6998H61.5998V75.7998Z"
                fill="#E3C3E6">
              </path>
              <path id="path_10"
                d="M72.5997 74.7001V75.8001H73.6997H74.7997V74.7001V73.6001H73.6997H72.5997V74.7001Z"
                fill="#E3C3E6">
              </path>
              <path id="path_11"
                d="M72.5997 41.7003V49.4003H80.2997H87.9997V41.7003V34.0003H80.2997H72.5997V41.7003ZM85.7997 41.7003V47.2003H80.2997H74.7997V41.7003V36.2003H80.2997H85.7997V41.7003Z"
                fill="#E3C3E6">
              </path>
              <path id="path_12"
                d="M76.9998 41.7002V45.0002H80.2998H83.5998V41.7002V38.4002H80.2998H76.9998V41.7002Z"
                fill="#B1FF29">
              </path>
              <path id="path_13"
                d="M85.7996 70.3V71.4H86.8996H87.9996V70.3V69.2H86.8996H85.7996V70.3Z"
                fill="#E3C3E6">
              </path>
              <path id="path_14"
                d="M33 81.3V89H40.7H48.4V81.3V73.6H40.7H33V81.3ZM46.2 81.3V86.8H40.7H35.2V81.3V75.8H40.7H46.2V81.3Z"
                fill="#E3C3E6">
              </path>
              <path id="path_15"
                d="M37.4001 81.2999V84.5999H40.7001H44.0001V81.2999V77.9999H40.7001H37.4001V81.2999Z"
                fill="#B1FF29">
              </path>
              <rect id="rect_01"
                x="1"
                y="1"
                width="120"
                height="120"
                rx="30"
                stroke="#AA27B1"
                stroke-width="1.5">
              </rect>
            </svg>
            <span class="db-qr-label">
              Unleash your soul with Beat Music
            </span>
          </div>
        </div>
        <div class="db-col">
          <div class="db-inner-row">
            <div class="db-inner-col">
              <div class="db-widget-container"
                ref="widgetContainer">
                <div class="db-widget-row">
                  {% comment %} <div class="db-widget-col">
                    <div class="db-widget-list">
                      {% render 'widget--year-2069' %}
                      {% render 'widget--music-player' %}
                      {% render 'widget--discover-collect' %}
                      {% render 'widget--merch' %}
                      {% render 'widget--roadmap' %}
                    </div>
                  </div>
                  <div class="db-widget-col">
                    <div class="db-widget-list">
                      {% render 'widget--the-beats-radio' %}
                      {% render 'widget--the-beats-currency' %}
                      {% render 'widget--creators' %}
                      {% render 'widget--marketplace' %}
                    </div>
                  </div> {% endcomment %}
                  <div class="db-widget-col">
                    <div class="db-widget-list">
                      {% render 'widget--year-2069' %}
                      {% render 'widget--roadmap' %}
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div class="db-inner-col">
              {% render 'socials' %}
              {% comment %}
                <button class="db-btn--scroll-up"
                  type="button"
                  @click="widgetScrollUp();">
                  <svg class="svg-icon-arrow-up db-svg"
                    width="16"
                    height="44"
                    viewBox="0 0 16 44"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg">
                    <path id="path_01"
                      d="M7 43C7 43.5523 7.44772 44 8 44C8.55228 44 9 43.5523 9 43L7 43ZM8.70711 0.292893C8.31658 -0.0976311 7.68342 -0.0976311 7.29289 0.292893L0.928932 6.65685C0.538408 7.04738 0.538408 7.68054 0.928932 8.07107C1.31946 8.46159 1.95262 8.46159 2.34315 8.07107L8 2.41421L13.6569 8.07107C14.0474 8.46159 14.6805 8.46159 15.0711 8.07107C15.4616 7.68054 15.4616 7.04738 15.0711 6.65685L8.70711 0.292893ZM9 43L9 1L7 1L7 43L9 43Z"
                      fill="#CAC7D0"
                      fill-opacity="0.3">
                    </path>
                  </svg>
                </button>
                <button class="db-btn--scroll-down"
                  type="button"
                  @click="widgetScrollDown();">
                  <svg class="svg-icon-arrow-down db-svg"
                    width="16"
                    height="44"
                    viewBox="0 0 16 44"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg">
                    <path id="path_01"
                      d="M9 1C9 0.447715 8.55228 -2.41411e-08 8 0C7.44772 2.41411e-08 7 0.447715 7 1L9 1ZM7.2929 43.7071C7.68342 44.0976 8.31658 44.0976 8.70711 43.7071L15.0711 37.3431C15.4616 36.9526 15.4616 36.3195 15.0711 35.9289C14.6805 35.5384 14.0474 35.5384 13.6569 35.9289L8 41.5858L2.34315 35.9289C1.95262 35.5384 1.31946 35.5384 0.928934 35.9289C0.53841 36.3195 0.53841 36.9526 0.928934 37.3431L7.2929 43.7071ZM7 1L7 43L9 43L9 1L7 1Z"
                      fill="#CAC7D0"
                      fill-opacity="0.3">
                    </path>
                  </svg>
                </button>
              {% endcomment %}
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>

</div>
<script>
  const DB_Page_Home_Options = {
    name: 'DB Page Home Options',
    data() {
      return {
        pageLoader: true,
        now_playing_endpoint: 'https://api.spotify.com/v1/me/player/currently-playing',
        token_endpoint:'https://accounts.spotify.com/api/token',
        client_id: 'd73738945439475087703b513466d0d7',
        client_secret: '0329c2f2504645fcaf84a1059ad5121e',
        // access_token: 'BQCq1Bdq_V6hsjYtvK2mV-38vNlI_pNuAruO8ZduTaruVwe91exyKtNe6r1odJqG_sDWuz13taVB-TdHF1TmPRCV2thjoWt3fDw9r1tfaoCw8wvBnlFdRGU9dDGCKroPbjEV1G6HQk8s-FBtPwckRtdb36GS2wBlIL7cc6OSgWeEy3XApDtvEmrJvKdcEsxFN1cuKMVcRLP1QinTQOdnhBL_lbILqvtZ',
        access_token: localStorage.getItem('access_token'),
        refresh_token: localStorage.getItem('refresh_token'),
        token: {
          "access_token": "BQAPU40p_dizs04IM6nDtfMDqU5P_bw39CS8DuVRhlDcIDY0ZtNEJhwn-llOYJYC3S9_XZx2T4LztK7ysjLjP2C2kM5j-o_tES8OqIEZZP3FKM97i2Wthc5sgJNDq6k8YydmDHQzbXDif57crxsgMiaJIE0Qa6XcUagBcZLW3HRzHXUkurJp3HrC-_e4UNJFRx18SGmkgPez3-MaWNRmJBjAmMbR",
          "token_type": "Bearer",
          "expires_in": 3600,
          "refresh_token": "AQDBqq2vgPrI0u-VLlsKSaajMGAKxhQOD9jj71cXWGE4NApMs_umyqCHaSDxVxd_vzYNfrALJ8Mb7Zi-pgavFETcoIRu9VRnTVgxLxuNNlqLeSHkyrQIA4zylYuXQ7JPCAo",
          "scope": "streaming user-read-email user-read-private user-modify-playback-state"
        },
        music_player: {
          albumImageUrl: null,
          artist: null,
          isPlaying: null,
          songUrl: null,
          title: null,
          timePlayed: null,
          timeTotal: null,
          artistUrl: null
        },
        playerState:null,
        secondsPlayed:0,
        minutesPlayed:0,
        secondsTotal: 0,
        minutesTotal: 0,
        albumImageUrl: null,
        title: null,
        artist: null,
        widgetSettings: {
          scrollValue: 0,
        },
        player:null,
        device: null,
        is_paused: true,
        is_active: false,
        track: null,
        playlist: [],
      }
    },
    created() {

      const script = document.createElement('script');
      script.src = "https://sdk.scdn.co/spotify-player.js";
      script.async = true;
      document.body.appendChild(script);

      this.onLoadAnimation();

      const currentUrl = window.location.href;
      const url = new URL(currentUrl);

      if (url.search) {
        const params = new URLSearchParams(url.search);

        if (params.get('code') !== "") {
          console.log(`Hello World Code`);
          console.log(params.get('code'));

          const code = params.get('code');
          const authString = `${this.client_id}:${this.client_secret}`;
          const base64Auth = btoa(authString);
          const spotify_redirect_uri = 'http://127.0.0.1:9292';


          const authOptions = {
            method:'POST',
            url: 'https://accounts.spotify.com/api/token',
            headers: {
              'Authorization': 'Basic ' + btoa(this.client_id + ':' + this.client_secret),
              'Content-Type': 'application/x-www-form-urlencoded'
            },
            body: 'code=' + code + '&redirect_uri=' + encodeURIComponent(spotify_redirect_uri) + '&grant_type=authorization_code'
          }

          fetch(authOptions.url, authOptions).then((response) => {
            return response.json();
          }).then(data => {
            const access_token = data.access_token;
            const refresh_token = data.refresh_token;
            localStorage.setItem('access_token', access_token);
            localStorage.setItem('refresh_token', refresh_token);
            window.location.href = `http://127.0.0.1:9292`;
          })
        }
      }

      if (this.access_token) {
        this.connectToSpotifyWebSDK();
      }
    },
    watch: {
      device(newValue, oldValue) {
        this.autoConnect(newValue, oldValue);
      },
      access_token(newValue, oldValue) {
        console.log(newValue);
        console.log(`Compare Access Token ${newValue}:${oldValue}`);
        this.connectToSpotifyWebSDK();
      }
    },
    mounted() {
      this.widgetDragScroll();
    },
    updated() {},
    computed: {
      songUrl() {
        return this.playerState === 'PLAY' || this.playerState === 'PAUSE' ? this.music_player.songUrl : '';
      }
    },
    methods: {
      connectToSpotifyWebSDK() {

        window.onSpotifyWebPlaybackSDKReady = () => {
            const player = new window.Spotify.Player({
              name: "Deadbeat Vuejs",
              getOAuthToken: (cb) => {
                console.log(this.access_token);
                cb(this.access_token);
              },
              volume:0.5,
            })

            this.player = player;
            console.log(player);

            player.addListener('ready', ({device_id}) => {
              this.device = device_id
              console.log(`Ready With Device ID ${device_id}`);

            })

            player.addListener('not_ready', ({device_id}) => {

              console.log(`Device ID has gone offline ${device_id}`);

            })

            player.addListener('player_state_changed', (state) => {

              console.log(`Player State Changed`);
              if (!state) {
                return;
              }

              console.log(state.track_window.current_track);
              console.log(state);
              this.is_paused = state.paused;
              this.track = state.track_window.current_track

              player.getCurrentState().then(state => {
                !state ? this.is_active=false : this.is_active=true;
              })

            });

            player.on('authentication_error', ({ message }) => {
              console.error('Failed to authenticate', message);
              
              this.getAccessToken();
            });

            player.connect();
        }
      },
      async autoConnect(newValue, oldValue) {
        console.log(`Compare ${newValue}:${oldValue}`);
        console.log(this.access_token);

        const response = await fetch(`https://api.spotify.com/v1/playlists/6guhtLC6PbcxXowxpWwP4a`, {
          headers: {
            Authorization: `Bearer ${this.access_token}`,
          }
        })

        const data = await response.json();

        const getTrackURIS = data.tracks.items.map((track) => {
          return track.track.uri;
        })

        console.log(getTrackURIS);

        // const convertToJson = JSON.stringify({
        //   "uris": ['spotify:track:5CUQnKjA6nlteCnxMKsjIu', 'spotify:track:0mtkRIAOueeXqHpyahIbtJ']
        // });
        const convertToJson = JSON.stringify({
          uris: getTrackURIS
        })

        fetch(`https://api.spotify.com/v1/me/player/play?device_id=${newValue}`, {
          method: 'PUT',
          headers: {
            Authorization: `Bearer ${this.access_token}`,
          },
          body: convertToJson,
        }).then((response) => {
          console.log(response.headers);
          return response.json();
        }).then(data => {
          console.log(`Playback started: ${data}`);
          this.player.togglePlay();
        })
      },
      togglePlay() {
        this.player.togglePlay();
      },
      nextPlay() {
        this.player.nextTrack();
      },
      previousPlay() {
        this.player.previousTrack();
      },
      login2() {
        const scope = `streaming user-read-email user-read-private user-modify-playback-state`;

        const state = this.generateRandomString(16);

        const auth_query_parameters = new URLSearchParams({
          response_type:'code',
          client_id: this.client_id,
          scope:scope,
          redirect_uri: 'http://127.0.0.1:9292',
          state:state,
        })

        window.location.href = `https://accounts.spotify.com/authorize/?${auth_query_parameters.toString()}`;
      },
      login() {
        const scope = `
          streaming
          user-read-email
          user-read-private
          user-read-currently-playing
        `

        const state = this.generateRandomString(16);
        console.log(state)
        console.log(this.client_id);
        const auth_query_parameters = new URLSearchParams();
        auth_query_parameters.append('response_type', 'code');
        auth_query_parameters.append('client_id', this.client_id);
        auth_query_parameters.append('scope', scope);
        auth_query_parameters.append('redirect_uri', 'http://127.0.0.1:9292');
        auth_query_parameters.append('state', state);

        window.location.href = ('https://accounts.spotify.com/authorize/?' + auth_query_parameters.toString());
      },
      generateRandomString(length) {
        var text = '';
        var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';

        for (var i = 0; i < length; i++) {
          text += possible.charAt(Math.floor(Math.random() * possible.length));
        }
        return text;
      },
      async getAccessToken() {

        // const payload = {
        //   method: 'POST',
        //   headers: {
        //     'Content-Type': 'application/x-www-form-urlencoded'
        //   },
        //   body: new URLSearchParams({
        //     grant_type: 'refresh_token',
        //     refresh_token: this.refresh_token,
        //     client_id: this.client_id
        //   }),
        // }

        // const body = await fetch(url, payload);
        // console.log(body);

        // const response = await body.json();

        const combinedString = `${this.client_id}:${this.client_secret}`;
        const url = "https://accounts.spotify.com/api/token";
        const basic = btoa(combinedString);
        const params = {
          grant_type: 'refresh_token',
          refresh_token: this.refresh_token
        }
        const encodedParams = Object.keys(params).map(key => {
          return encodeURIComponent(key) + '=' + encodeURIComponent(params[key]);
        });
        const queryString = encodedParams.join('&');

        const response = await fetch(url, {
          method:'POST',
          headers: {
            Authorization: `Basic ${basic}`,
            'Content-Type': 'application/x-www-form-urlencoded',
          },
          body: queryString
        })

        const data = await response.json();

        console.log(data);

        this.access_token = data.access_token;

        localStorage.setItem('access_token', data.access_token);
      },
      async getNowPlaying(access_token) {
        try {
          const response = await fetch(this.now_playing_endpoint, {
            headers: {
              Authorization: `Bearer ${access_token}`,
            }
          })

          if (response.status > 400) {
            throw new Error('Unable to Fetch Song');
          } else if(response.status === 204) { //The response was fetched but there was no content
            throw new Error('Currently Not Playing')
          }

          const song = await response.json()
          const albumImageUrl = song.item.album.images[0].url;
          const artist = song.item.artists.map((artist) => artist.name).join(', ');
          console.log(song);
          const isPlaying = song.is_playing;
          const songUrl = song.item.external_urls.spotify;
          const title = song.item.name;
          const timePlayed = song.progress_ms;
          const timeTotal = song.item.duration_ms;
          const artistUrl = song.item.album.artists[0].external_urls.spotify;

          this.music_player.albumImageUrl = albumImageUrl;
          this.music_player.artist = artist;
          this.music_player.songUrl = songUrl;
          this.music_player.title = title;
          this.music_player.timePlayed = timePlayed;
          this.music_player.timeTotal = timeTotal;
          this.music_player.artistUrl = artistUrl;
          this.music_player.isPlaying = isPlaying;
          
          console.log(this.music_player);
          this.settingValue();
        } catch (error) {
          console.log(error);
        }
      },
      settingValue() {
        console.log(`Hello World`);
        this.playerState = this.music_player.isPlaying ? 'PLAY' : 'PAUSE';

        //Converting the playback duration from seconds to minutes and seconds
        this.secondsPlayed = Math.floor(this.music_player.timePlayed / 1000);

        this.minutesPlayed = Math.floor(this.secondsPlayed / 60);

        this.secondsPlayed = this.secondsPlayed % 60;

        //Converting the song duration from seconds to minutes and seconds

        this.secondsTotal = Math.floor(this.music_player.timeTotal / 1000);

        this.minutesTotal = Math.floor(this.secondsTotal / 60);

        this.secondsTotal = this.secondsTotal % 60;

        this.albumImageUrl = this.music_player.albumImageUrl;

        this.title = this.music_player.title;
        
        this.artist = this.music_player.artist;
      },
      pad(n) {
        return (n < 10) ? ("0" + n) : n;
      },
      playingTime() {
        return `${this.pad(this.minutesPlayed)}:${this.pad(this.secondsPlayed)} / ${this.pad(this.minutesTotal)}:${this.pad(this.secondsTotal)}`
      },
      onLoadAnimation() {
        console.log('onLoadAnimation');
        setTimeout(() => {
          document.querySelector('.db-site-loader').classList.remove('--show');
          document.querySelector('.db-section--banner').classList.add('--animate-now');
          document.querySelector('.db-header').classList.add('--animate-now');
        }, 3000);
      },
      widgetDragScroll() {
        var widgetContainer = this.$refs.widgetContainer;

        let startY, scrollTop, isDown;
        let self = this;

        widgetContainer.addEventListener('mousedown', e => mouseIsDown(e));  
        widgetContainer.addEventListener('mouseup', e => mouseUp(e));
        widgetContainer.addEventListener('mouseleave', e => mouseLeave(e));
        widgetContainer.addEventListener('mousemove', e => mouseMove(e));

        function mouseIsDown (e) {
          isDown = true;
          startY = e.pageY - widgetContainer.offsetTop;
          scrollTop = widgetContainer.scrollTop;
          self.widgetSettings.scrollValue = scrollTop;
        }

        function mouseUp (e) {
          isDown = false;
        }

        function mouseLeave (e) {
          isDown = false;
        }

        function mouseMove (e) {
          if (isDown) {
            e.preventDefault();
            const y = e.pageY - widgetContainer.offsetTop;
            const walkY = y - startY;
            widgetContainer.scrollTop = scrollTop - walkY;
            self.widgetSettings.scrollValue = scrollTop;
            widgetContainer.classList.add('--dragging');
          }
          else {
            widgetContainer.classList.remove('--dragging');
          }
        }
      },
      widgetScrollUp() {
        var widgetContainer = this.$refs.widgetContainer;

        let self = this;
        let scrollTop = widgetContainer.scrollTop;
        widgetContainer.scrollTop = scrollTop - 100;
      },
      widgetScrollDown() {
        var widgetContainer = this.$refs.widgetContainer;

        let self = this;
        let scrollTop = widgetContainer.scrollTop;
        widgetContainer.scrollTop = scrollTop + 100;
      },
    }
  };

  Vue.createApp(DB_Page_Home_Options).mount('.db-page--home');
</script>