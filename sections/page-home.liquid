<style>
  .db-footer {
    margin: -45px auto 0;
  }
</style>
<div class="db-page db-page--home">

  {% comment %}
    <div class="spotify-backdrop">
      <div class="spotify-login" v-if="is_active === false" @click="login2">
        <div class="spotify-wrap-login">
          <div class="spotify">
            <svg xmlns="http://www.w3.org/2000/svg" width="63" height="63" viewBox="0 0 63 63" fill="none" class="db-svg">
              <circle cx="31.6999" cy="31.6998" r="26.7" fill="black"/>
              <path d="M50.085 28.035C40.005 22.05 23.1525 21.42 13.545 24.4125C11.97 24.885 10.395 23.94 9.9225 22.5225C9.45 20.9475 10.395 19.3725 11.8125 18.9C22.995 15.5925 41.4225 16.2225 53.0775 23.1525C54.495 23.94 54.9675 25.83 54.18 27.2475C53.3925 28.35 51.5025 28.8225 50.085 28.035ZM49.77 36.855C48.9825 37.9575 47.565 38.43 46.4625 37.6425C37.9575 32.445 25.0425 30.87 15.12 34.02C13.86 34.335 12.4425 33.705 12.1275 32.445C11.8125 31.185 12.4425 29.7675 13.7025 29.4525C25.2 25.9875 39.375 27.72 49.14 33.705C50.085 34.1775 50.5575 35.7525 49.77 36.855ZM45.99 45.5175C45.36 46.4625 44.2575 46.7775 43.3125 46.1475C35.91 41.58 26.6175 40.635 15.5925 43.155C14.49 43.47 13.545 42.6825 13.23 41.7375C12.915 40.635 13.7025 39.69 14.6475 39.375C26.6175 36.6975 37.0125 37.8 45.2025 42.84C46.305 43.3125 46.4625 44.5725 45.99 45.5175ZM31.5 0C27.3634 0 23.2672 0.814772 19.4455 2.39779C15.6237 3.98082 12.1512 6.30109 9.22614 9.22614C3.31874 15.1335 0 23.1457 0 31.5C0 39.8543 3.31874 47.8665 9.22614 53.7739C12.1512 56.6989 15.6237 59.0192 19.4455 60.6022C23.2672 62.1852 27.3634 63 31.5 63C39.8543 63 47.8665 59.6813 53.7739 53.7739C59.6813 47.8665 63 39.8543 63 31.5C63 27.3634 62.1852 23.2672 60.6022 19.4455C59.0192 15.6237 56.6989 12.1512 53.7739 9.22614C50.8488 6.30109 47.3763 3.98082 43.5545 2.39779C39.7328 0.814772 35.6366 0 31.5 0Z" fill="#1ED760"/>
            </svg>
          </div>

          <div class="spotify-db">
            Unleash your DEADBEAT Playlist
          </div>
        </div>
      </div>
      <div class="spotify-player" v-else>

        <div class="spotify-wrapper">

          <div class="spotify-info">

            <div class="spotify-trackName-container">
              <div class="spotify-trackName">
                <span v-text="track?.album?.name"></span>
              </div>
            </div>

            <div class="spotify-artist-container">
              <div class="spotify-artist">
                <span v-text="track?.artists[0].name"></span>
              </div>
            </div>
          </div>

          <div class="spotify-controls">
            <div class="shuffle">
              <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 18 18" fill="none" class="db-svg" @click="shufflePlay">
                <path d="M17.6732 3.63033C17.855 3.81398 17.855 4.11172 17.6732 4.29535L14.71 7.28793C14.5282 7.47157 14.2334 7.47157 14.0516 7.28793C13.8698 7.10429 13.8698 6.80655 14.0516 6.62291L16.2904 4.36187C15.635 4.30516 14.9119 4.27653 13.9463 4.56353C12.48 4.99935 10.4868 6.19095 7.74555 9.31855C5.89788 11.4266 4.26081 12.7572 2.96768 13.5404C2.32165 13.9317 1.75502 14.1903 1.28561 14.339C0.833608 14.4823 0.415891 14.5419 0.0959103 14.4669L0.306484 13.5508C0.381562 13.5684 0.60513 13.569 1.00676 13.4417C1.39098 13.3199 1.89034 13.0963 2.48876 12.7339C3.68454 12.0096 5.25027 10.7466 7.04827 8.69519C9.85197 5.49631 11.9857 4.16589 13.6834 3.66131C14.6356 3.37831 15.464 3.36382 16.1314 3.40328L14.0516 1.30275C13.8698 1.11911 13.8698 0.821368 14.0516 0.637729C14.2334 0.454089 14.5282 0.454091 14.7101 0.637732L17.6732 3.63033Z" fill="white" fill-opacity="0.3"/>
                <path d="M17.4957 13.7174C17.6758 13.9004 17.6758 14.1972 17.4957 14.3802L14.5605 17.3627C14.3804 17.5458 14.0883 17.5458 13.9082 17.3627C13.7281 17.1797 13.7281 16.883 13.9082 16.6999L15.9337 14.6418C15.8891 14.6458 15.8438 14.6496 15.7979 14.653C15.2083 14.6969 14.5071 14.682 13.6656 14.4446C12.1939 14.0293 10.3517 12.9503 7.93336 10.4453L8.5956 9.7928C10.9453 12.2258 12.6514 13.1856 13.9124 13.5414C14.6275 13.7432 15.2183 13.7563 15.7306 13.7182C15.8766 13.7073 16.0152 13.6925 16.1507 13.6763L13.9082 11.3976C13.7281 11.2146 13.7281 10.9179 13.9082 10.7348C14.0884 10.5518 14.3804 10.5518 14.5605 10.7348L17.4957 13.7174Z" fill="white" fill-opacity="0.3"/>
                <path d="M6.54742 7.57914L5.9134 8.26073C4.52684 6.83339 3.31893 5.8881 2.35649 5.29673C1.76496 4.93326 1.27294 4.70764 0.894675 4.58416C0.498848 4.45495 0.28093 4.45513 0.208593 4.47219L0 3.55914C0.319005 3.48389 0.732207 3.54662 1.17682 3.69176C1.63899 3.84263 2.19673 4.10318 2.83381 4.49465C3.86653 5.12921 5.12562 6.11873 6.54742 7.57914Z" fill="white" fill-opacity="0.3"/>
              </svg>
            </div>

            <div class="controls">
              <div class="previous">
                <svg xmlns="http://www.w3.org/2000/svg" width="23" height="21" viewBox="0 0 23 21" fill="none" class="db-svg" @click="previousPlay">
                  <path d="M6.16972 0C6.59562 0 6.94093 0.343068 6.94093 0.766197V8.89176L21.8374 0.174153C22.3533 -0.127699 23.0035 0.244051 23 0.838776L22.8871 20.2371C22.8838 20.8306 22.2315 21.1951 21.7191 20.8897L6.94093 12.0803V20.1765C6.94093 20.5996 6.59562 20.9427 6.16972 20.9427H0.771215C0.345316 20.9427 0 20.5996 0 20.1765V0.766197C0 0.343068 0.345316 0 0.771215 0H6.16972Z" fill="#D9D9D9"/>
                </svg>
              </div>

              <div class="play-pause">
                <svg xmlns="http://www.w3.org/2000/svg" width="62" height="62" viewBox="0 0 62 62" fill="none" class="db-svg" v-if="is_paused === true" @click="togglePlay">
                  <circle cx="31" cy="31" r="30" stroke="#B1FF29"/>
                  <path d="M41 31C41.0006 31.2612 40.9334 31.5181 40.8047 31.7457C40.6761 31.9733 40.4905 32.1639 40.2659 32.299L26.3491 40.7736C26.1145 40.9166 25.8457 40.9947 25.5706 40.9997C25.2956 41.0048 25.0241 40.9367 24.7843 40.8024C24.5468 40.6702 24.349 40.4775 24.2111 40.2439C24.0733 40.0104 24.0004 39.7445 24 39.4736V22.5264C24.0004 22.2555 24.0733 21.9896 24.2111 21.7561C24.349 21.5225 24.5468 21.3298 24.7843 21.1976C25.0241 21.0633 25.2956 20.9952 25.5706 21.0003C25.8457 21.0053 26.1145 21.0834 26.3491 21.2264L40.2659 29.701C40.4905 29.8361 40.6761 30.0267 40.8047 30.2543C40.9334 30.4819 41.0006 30.7388 41 31Z" fill="#B1FF29"/>
                </svg>
                <svg xmlns="http://www.w3.org/2000/svg" width="60" height="60" viewBox="0 0 60 60" fill="none" class="db-svg" v-else @click="togglePlay">
                  <circle cx="30" cy="30" r="29.5" stroke="#B1FF29"/>
                  <rect x="23" y="19" width="5" height="20" rx="1" fill="#B1FF29"/>
                  <rect x="32" y="19" width="5" height="20" rx="1" fill="#B1FF29"/>
                </svg>
              </div>

              <div class="next">
                <svg xmlns="http://www.w3.org/2000/svg" width="23" height="21" viewBox="0 0 23 21" fill="none" class="db-svg" @click="nextPlay">
                  <path d="M16.8303 0C16.4044 0 16.0591 0.343068 16.0591 0.766197V8.89176L1.16261 0.174153C0.64671 -0.127699 -0.00350046 0.244051 1.41873e-05 0.838776L0.11286 20.2371C0.116249 20.8306 0.768467 21.1951 1.28085 20.8897L16.0591 12.0803V20.1765C16.0591 20.5996 16.4044 20.9427 16.8303 20.9427H22.2288C22.6547 20.9427 23 20.5996 23 20.1765V0.766197C23 0.343068 22.6547 0 22.2288 0H16.8303Z" fill="#D9D9D9"/>
                </svg>
              </div>
            </div>

            <div class="restart">
              <svg xmlns="http://www.w3.org/2000/svg" width="18" height="15" viewBox="0 0 18 15" fill="none" class="db-svg" @click="playSingleTrack">
                <path d="M1.1954 2.59091C1.1954 1.83643 1.79236 1.2248 2.52874 1.2248H15.4713C16.2076 1.2248 16.8046 1.83643 16.8046 2.59091V9.762C16.8046 10.5165 16.2076 11.1281 15.4713 11.1281H11.7648L13.4023 9.52646C13.6357 9.28731 13.6357 8.89956 13.4023 8.6604C13.1689 8.42125 12.7904 8.42125 12.557 8.6604L9.8992 11.3075C9.66578 11.5466 9.66578 11.9344 9.8992 12.1735L12.4651 14.8206C12.6985 15.0598 13.0769 15.0598 13.3103 14.8206C13.5438 14.5815 13.5438 14.1937 13.3103 13.9546L11.7648 12.3529H15.4713C16.8678 12.3529 18 11.1929 18 9.762V2.59091C18 1.15999 16.8678 0 15.4713 0H2.52874C1.13215 0 0 1.15999 0 2.59091V9.762C0 11.1929 1.13215 12.3529 2.52874 12.3529H7.28736C7.61746 12.3529 7.88506 12.0787 7.88506 11.7405C7.88506 11.4023 7.61746 11.1281 7.28736 11.1281H2.52874C1.79236 11.1281 1.1954 10.5165 1.1954 9.762V2.59091Z" fill="white" fill-opacity="0.3"/>
              </svg>
            </div>
          </div>
        </div>

      </div>
    </div>
  {% endcomment %}

  <section class="db-section db-section--banner">

    <div class="db-bg-wrap">
      <video class="db-bg-video"
        id=""
        poster=""
        allow="autoplay"
        preload="auto"
        control="false"
        autoplay="true"
        volume="0"
        playsinline
        muted
        loop>
        <source type="video/mp4" src="https://cdn.shopify.com/videos/c/o/v/2820077309c546bc80c521efca8ed9bd.mp4">
        <source type="video/webm" src="https://cdn.shopify.com/videos/c/o/v/e77f47c17e6845c8a5093f2e3fde59bf.webm">
      </video>
      <div class="db-bg-overlay"></div>
      <div class="db-socials">
        {% render 'socials' %}
      </div>
    </div>
 
    <figure v-if="isActiveVideo">
      <video controls preload="metadata" poster="{{ 'Explore-OC__asset-v01-2880x1620.png' | asset_url }}">
        <source src="https://cdn.shopify.com/videos/c/o/v/f29d9162681349ebb6dc586b7f45ce2c.mp4" type="video/mp4"/>
      </video>
      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" class="db-svg" @click="toggleVideo">
        <g clip-path="url(#clip0_3450_283)">
        <path fill-rule="evenodd" clip-rule="evenodd" d="M11.9996 14.1211L17.3026 19.4251C17.584 19.7065 17.9657 19.8646 18.3636 19.8646C18.7616 19.8646 19.1432 19.7065 19.4246 19.4251C19.706 19.1437 19.8641 18.7621 19.8641 18.3641C19.8641 17.9662 19.706 17.5845 19.4246 17.3031L14.1196 12.0001L19.4236 6.69711C19.5629 6.55778 19.6733 6.39238 19.7487 6.21036C19.824 6.02834 19.8628 5.83326 19.8627 5.63626C19.8627 5.43926 19.8238 5.2442 19.7484 5.06221C19.673 4.88022 19.5624 4.71488 19.4231 4.57561C19.2838 4.43634 19.1184 4.32588 18.9364 4.25054C18.7543 4.17519 18.5592 4.13644 18.3623 4.13648C18.1653 4.13653 17.9702 4.17538 17.7882 4.25081C17.6062 4.32624 17.4409 4.43678 17.3016 4.57611L11.9996 9.87911L6.6966 4.57611C6.5583 4.43278 6.39284 4.31843 6.20987 4.23973C6.0269 4.16103 5.83009 4.11956 5.63092 4.11774C5.43176 4.11591 5.23422 4.15377 5.04984 4.22911C4.86546 4.30444 4.69793 4.41574 4.55703 4.55652C4.41612 4.69729 4.30466 4.86471 4.22916 5.04902C4.15365 5.23333 4.1156 5.43083 4.11724 5.63C4.11887 5.82917 4.16016 6.02602 4.23869 6.20906C4.31721 6.3921 4.43141 6.55767 4.5746 6.69611L9.8796 12.0001L4.5756 17.3031C4.29421 17.5845 4.13612 17.9662 4.13612 18.3641C4.13612 18.7621 4.29421 19.1437 4.5756 19.4251C4.857 19.7065 5.23865 19.8646 5.6366 19.8646C6.03456 19.8646 6.41621 19.7065 6.6976 19.4251L11.9996 14.1201V14.1211Z" fill="#CAC7D0"/>
        </g>
        <defs>
        <clipPath id="clip0_3450_283">
        <rect width="24" height="24" fill="white"/>
        </clipPath>
        </defs>
      </svg>
    </figure>

    <div class="db-container">
      <div class="db-row">
        <div class="db-col">
          <h1>
            <span>Vibe into the Afterlife.</span>
            <span>Become a</span>
            <span>Deadbeat.</span>
          </h1>
          <p>
            In 2069 humanity has been replaced by 7 wildly fun, music genre loving boroughs of the undead, competing in one big game of musical glory!
            <br />
            <br />
            But not quite... yet. Fun takes some work, dammit. So browse a bit, sign up for updates, tell a friend, tell your dog, tell the world.
            <br />
            <br />
            Get it? Got it? Goose yourself.
          </p>
        </div>
        <div class="db-col">
          <div class="db-inner-row">
            <div class="db-inner-col">
              <div class="db-widget-container"
                ref="widgetContainer">
                <div class="db-widget-row">
                  
                  {% comment %}
                    <div class="db-widget-col">
                      <div class="db-widget-list">
                        {% render 'widget--year-2069' %}
                        {% render 'widget--music-player' %}
                        {% render 'widget--discover-collect' %}
                        {% render 'widget--merch' %}
                        {% render 'widget--roadmap' %}
                      </div>
                    </div>
                    <div class="db-widget-col">
                      <div class="db-widget-list">
                        {% render 'widget--the-beats-radio' %}
                        {% render 'widget--the-beats-currency' %}
                        {% render 'widget--creators' %}
                        {% render 'widget--marketplace' %}
                      </div>
                    </div>
                  {% endcomment %}

                  <div class="db-widget-col">
                    {% render 'widget--columbus' %}
                  </div>

                  <div class="db-widget-col">
                    <div class="db-widget-inner-row">
                      <div class="db-widget-inner-col">
                        <div class="db-widget-project-trailer"
                          @click="toggleVideo">
                          <div class="db-play">
                            <svg class="db-svg"
                              xmlns="http://www.w3.org/2000/svg"
                              width="62"
                              height="62"
                              viewBox="0 0 62 62"
                              fill="none">
                              <circle id="circle_01"
                                cx="31.4326"
                                cy="31"
                                r="30"
                                stroke="#B1FF29">
                              </circle>
                              <path id="path_01"
                                d="M41.4326 31C41.4333 31.2612 41.366 31.5181 41.2373 31.7457C41.1087 31.9733 40.9231 32.1639 40.6985 32.299L26.7817 40.7736C26.5471 40.9166 26.2783 40.9947 26.0033 40.9997C25.7282 41.0048 25.4567 40.9367 25.2169 40.8024C24.9794 40.6702 24.7816 40.4775 24.6437 40.2439C24.5059 40.0104 24.433 39.7445 24.4326 39.4736V22.5264C24.433 22.2555 24.5059 21.9896 24.6437 21.7561C24.7816 21.5225 24.9794 21.3298 25.2169 21.1976C25.4567 21.0633 25.7282 20.9952 26.0033 21.0003C26.2783 21.0053 26.5471 21.0834 26.7817 21.2264L40.6985 29.701C40.9231 29.8361 41.1087 30.0267 41.2373 30.2543C41.366 30.4819 41.4333 30.7388 41.4326 31Z"
                                fill="#B1FF29">
                              </path>
                            </svg>
                            <svg class="db-svg"
                              xmlns="http://www.w3.org/2000/svg"
                              width="78"
                              height="79"
                              viewBox="0 0 78 79"
                              fill="none">
                              <ellipse id="ellipse_01"
                                cx="39.2908"
                                cy="39.0925"
                                rx="37.9808"
                                ry="38.4231"
                                stroke="#B1FF29"
                                stroke-width="1.26355">
                              </ellipse>
                              <path id="path_01"
                                d="M51.9516 39.0925C51.9524 39.427 51.8673 39.756 51.7044 40.0475C51.5416 40.3391 51.3065 40.5832 51.0222 40.7562L33.4032 51.6102C33.1062 51.7933 32.7659 51.8933 32.4177 51.8998C32.0694 51.9063 31.7257 51.8191 31.4222 51.6471C31.1215 51.4778 30.871 51.2309 30.6965 50.9318C30.522 50.6327 30.4297 50.2922 30.4292 49.9453V28.2397C30.4297 27.8928 30.522 27.5523 30.6965 27.2532C30.871 26.9541 31.1215 26.7072 31.4222 26.5379C31.7257 26.3659 32.0694 26.2786 32.4177 26.2851C32.7659 26.2916 33.1062 26.3916 33.4032 26.5748L51.0222 37.4288C51.3065 37.6018 51.5416 37.8459 51.7044 38.1374C51.8673 38.429 51.9524 38.758 51.9516 39.0925Z"
                                fill="#B1FF29">
                              </path>
                            </svg>
                          </div>
                          <div class="db-project-trailer">
                            <span>
                              PROJECT
                            </span>
                            <span>
                              TEASER
                            </span>
                          </div>
                        </div>
                      </div>
                      <div class="db-widget-inner-col">
                        <iframe src="https://open.spotify.com/embed/playlist/3KWtOgG4qoKIoFO9Ls6bvk?utm_source=generator&theme=0"
                          style="border-radius:12px"
                          width="100%"
                          height="352"
                          frameBorder="0"
                          allowfullscreen=""
                          allow="autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture"
                          loading="lazy">
                        </iframe>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div class="db-inner-col">
              {% render 'socials' %}
              {% comment %}
                <button class="db-btn--scroll-up"
                  type="button"
                  @click="widgetScrollUp();">
                  <svg class="svg-icon-arrow-up db-svg"
                    width="16"
                    height="44"
                    viewBox="0 0 16 44"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg">
                    <path id="path_01"
                      d="M7 43C7 43.5523 7.44772 44 8 44C8.55228 44 9 43.5523 9 43L7 43ZM8.70711 0.292893C8.31658 -0.0976311 7.68342 -0.0976311 7.29289 0.292893L0.928932 6.65685C0.538408 7.04738 0.538408 7.68054 0.928932 8.07107C1.31946 8.46159 1.95262 8.46159 2.34315 8.07107L8 2.41421L13.6569 8.07107C14.0474 8.46159 14.6805 8.46159 15.0711 8.07107C15.4616 7.68054 15.4616 7.04738 15.0711 6.65685L8.70711 0.292893ZM9 43L9 1L7 1L7 43L9 43Z"
                      fill="#CAC7D0"
                      fill-opacity="0.3">
                    </path>
                  </svg>
                </button>
                <button class="db-btn--scroll-down"
                  type="button"
                  @click="widgetScrollDown();">
                  <svg class="svg-icon-arrow-down db-svg"
                    width="16"
                    height="44"
                    viewBox="0 0 16 44"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg">
                    <path id="path_01"
                      d="M9 1C9 0.447715 8.55228 -2.41411e-08 8 0C7.44772 2.41411e-08 7 0.447715 7 1L9 1ZM7.2929 43.7071C7.68342 44.0976 8.31658 44.0976 8.70711 43.7071L15.0711 37.3431C15.4616 36.9526 15.4616 36.3195 15.0711 35.9289C14.6805 35.5384 14.0474 35.5384 13.6569 35.9289L8 41.5858L2.34315 35.9289C1.95262 35.5384 1.31946 35.5384 0.928934 35.9289C0.53841 36.3195 0.53841 36.9526 0.928934 37.3431L7.2929 43.7071ZM7 1L7 43L9 43L9 1L7 1Z"
                      fill="#CAC7D0"
                      fill-opacity="0.3">
                    </path>
                  </svg>
                </button>
              {% endcomment %}
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>

</div>
<script>
  const DB_Page_Home_Options = {
    name: 'DB Page Home Options',
    data() {
      return {
        pageLoader: true,
        now_playing_endpoint: 'https://api.spotify.com/v1/me/player/currently-playing',
        token_endpoint:'https://accounts.spotify.com/api/token',
        client_id: 'd73738945439475087703b513466d0d7',
        client_secret: '0329c2f2504645fcaf84a1059ad5121e',
        access_token: localStorage.getItem('access_token'),
        refresh_token: localStorage.getItem('refresh_token'),
        token: {
          "access_token": "BQAPU40p_dizs04IM6nDtfMDqU5P_bw39CS8DuVRhlDcIDY0ZtNEJhwn-llOYJYC3S9_XZx2T4LztK7ysjLjP2C2kM5j-o_tES8OqIEZZP3FKM97i2Wthc5sgJNDq6k8YydmDHQzbXDif57crxsgMiaJIE0Qa6XcUagBcZLW3HRzHXUkurJp3HrC-_e4UNJFRx18SGmkgPez3-MaWNRmJBjAmMbR",
          "token_type": "Bearer",
          "expires_in": 3600,
          "refresh_token": "AQDBqq2vgPrI0u-VLlsKSaajMGAKxhQOD9jj71cXWGE4NApMs_umyqCHaSDxVxd_vzYNfrALJ8Mb7Zi-pgavFETcoIRu9VRnTVgxLxuNNlqLeSHkyrQIA4zylYuXQ7JPCAo",
          "scope": "streaming user-read-email user-read-private user-modify-playback-state"
        },
        music_player: {
          albumImageUrl: null,
          artist: null,
          isPlaying: null,
          songUrl: null,
          title: null,
          timePlayed: null,
          timeTotal: null,
          artistUrl: null
        },
        playerState:null,
        secondsPlayed:0,
        minutesPlayed:0,
        secondsTotal: 0,
        minutesTotal: 0,
        albumImageUrl: null,
        title: null,
        artist: null,
        widgetSettings: {
          scrollValue: 0,
        },
        player:null,
        device: null,
        is_paused: true,
        is_active: false,
        track: null,
        isActiveVideo:false,
        playlist: [],
      }
    },
    created() {
      const script = document.createElement('script');
      script.src = "https://sdk.scdn.co/spotify-player.js";
      script.async = true;
      document.body.appendChild(script);

      this.onLoadAnimation();

      const currentUrl = window.location.href;
      const url = new URL(currentUrl);

      if (url.search) {
        const params = new URLSearchParams(url.search);

        if (params.get('code') !== "") {
          console.log(`Hello World Code`);
          console.log(params.get('code'));

          const code = params.get('code');
          const authString = `${this.client_id}:${this.client_secret}`;
          const base64Auth = btoa(authString);
          const spotify_redirect_uri = 'http://127.0.0.1:9292';


          const authOptions = {
            method:'POST',
            url: 'https://accounts.spotify.com/api/token',
            headers: {
              'Authorization': 'Basic ' + btoa(this.client_id + ':' + this.client_secret),
              'Content-Type': 'application/x-www-form-urlencoded'
            },
            body: 'code=' + code + '&redirect_uri=' + encodeURIComponent(spotify_redirect_uri) + '&grant_type=authorization_code'
          }

          fetch(authOptions.url, authOptions).then((response) => {
            return response.json();
          }).then(data => {
            const access_token = data.access_token;
            const refresh_token = data.refresh_token;
            localStorage.setItem('access_token', access_token);
            localStorage.setItem('refresh_token', refresh_token);
            window.location.href = `http://127.0.0.1:9292`;
          })
        }
      }

      if (this.access_token) {
        // this.connectToSpotifyWebSDK();
      }
    },
    watch: {
      device(newValue, oldValue) {
        this.autoConnect(newValue, oldValue);
      },
    },
    mounted() {
      this.widgetDragScroll();
    },
    updated() {},
    computed: {
      songUrl() {
        return this.playerState === 'PLAY' || this.playerState === 'PAUSE' ? this.music_player.songUrl : '';
      }
    },
    methods: {
      toggleVideo() {
        this.isActiveVideo = !this.isActiveVideo;
        const headerContainer = document.querySelector('.db-header');

        console.log(headerContainer);
        if (this.isActiveVideo === true) {
          headerContainer.style.display = 'none';
        } else {
          headerContainer.style.display = 'block';
        }
      },
      connectToSpotifyWebSDK() {
        window.onSpotifyWebPlaybackSDKReady = () => {
            const player = new window.Spotify.Player({
              name: "Deadbeat Vuejs",
              getOAuthToken: (cb) => {
                console.log(this.access_token);
                cb(this.access_token);
              },
              volume:0.5,
            })

            this.player = player;
            console.log(player);

            player.addListener('ready', ({device_id}) => {
              this.device = device_id
              console.log(`Ready With Device ID ${device_id}`);

            })

            player.addListener('not_ready', ({device_id}) => {

              console.log(`Device ID has gone offline ${device_id}`);

            })

            player.addListener('player_state_changed', (state) => {

              console.log(`Player State Changed`);
              if (!state) {
                return;
              }

              console.log(state.track_window.current_track);
              console.log(state);
              this.is_paused = state.paused;
              this.track = state.track_window.current_track

              player.getCurrentState().then(state => {
                !state ? this.is_active=false : this.is_active=true;
              })

            });

            player.on('authentication_error', ({ message }) => {
              console.error('Failed to authenticate', message);
              
              this.getAccessToken();
            });

            player.connect();
        }
      },
      playSingleTrack() {
        console.log(this.track.uri);
        const convertToJson = JSON.stringify({
          uris: [this.track.uri]
        })

        fetch(`https://api.spotify.com/v1/me/player/play?device_id=${this.device}`, {
          method: 'PUT',
          headers: {
            Authorization: `Bearer ${this.access_token}`,
          },
          body: convertToJson,
        }).then((response) => {
          return response.json();
        }).then(data => {
          console.log(`Playback started: ${data}`);
          this.player.togglePlay();
        })
      },
      async shufflePlay() {
        const response = await fetch(`https://api.spotify.com/v1/playlists/6guhtLC6PbcxXowxpWwP4a`, {
          headers: {
            Authorization: `Bearer ${this.access_token}`,
          }
        })

        const data = await response.json();

        const getTrackURIS = data.tracks.items.map((track) => {
          return track.track.uri;
        })

        const shuffleTrackURIS = this.shuffleArray(getTrackURIS);

        const convertToJson = JSON.stringify({
          uris: shuffleTrackURIS
        })

        fetch(`https://api.spotify.com/v1/me/player/play?device_id=${this.device}`, {
          method: 'PUT',
          headers: {
            Authorization: `Bearer ${this.access_token}`,
          },
          body: convertToJson,
        }).then((response) => {
          console.log(response.headers);
          return response.json();
        }).then(data => {
          console.log(`Playback started: ${data}`);
          this.player.togglePlay();
        })
      },
      shuffleArray(array) {
        for (let i = array.length - 1; i > 0; i--) {
          const j = Math.floor(Math.random() * (i + 1));
          [array[i], array[j]] = [array[j], array[i]];
        }
        return array;
      },
      async autoConnect(newValue, oldValue) {
        console.log(`Compare ${newValue}:${oldValue}`);
        console.log(this.access_token);

        const response = await fetch(`https://api.spotify.com/v1/playlists/6guhtLC6PbcxXowxpWwP4a`, {
          headers: {
            Authorization: `Bearer ${this.access_token}`,
          }
        })

        const data = await response.json();

        const getTrackURIS = data.tracks.items.map((track) => {
          return track.track.uri;
        })

        console.log(getTrackURIS);

        // const convertToJson = JSON.stringify({
        //   "uris": ['spotify:track:5CUQnKjA6nlteCnxMKsjIu', 'spotify:track:0mtkRIAOueeXqHpyahIbtJ']
        // });
        const convertToJson = JSON.stringify({
          uris: getTrackURIS
        })

        fetch(`https://api.spotify.com/v1/me/player/play?device_id=${newValue}`, {
          method: 'PUT',
          headers: {
            Authorization: `Bearer ${this.access_token}`,
          },
          body: convertToJson,
        }).then((response) => {
          console.log(response.headers);
          return response.json();
        }).then(data => {
          console.log(`Playback started: ${data}`);
          this.player.togglePlay();
        })
      },
      togglePlay() {
        this.player.togglePlay();
      },
      nextPlay() {
        this.player.nextTrack();
      },
      previousPlay() {
        this.player.previousTrack();
      },
      login2() {
        const scope = `streaming user-read-email user-read-private user-modify-playback-state`;

        const state = this.generateRandomString(16);

        const auth_query_parameters = new URLSearchParams({
          response_type:'code',
          client_id: this.client_id,
          scope:scope,
          redirect_uri: 'http://127.0.0.1:9292',
          state:state,
        })

        window.location.href = `https://accounts.spotify.com/authorize/?${auth_query_parameters.toString()}`;
      },
      login() {
        const scope = `
          streaming
          user-read-email
          user-read-private
          user-read-currently-playing
        `

        const state = this.generateRandomString(16);
        console.log(state)
        console.log(this.client_id);
        const auth_query_parameters = new URLSearchParams();
        auth_query_parameters.append('response_type', 'code');
        auth_query_parameters.append('client_id', this.client_id);
        auth_query_parameters.append('scope', scope);
        auth_query_parameters.append('redirect_uri', 'http://127.0.0.1:9292');
        auth_query_parameters.append('state', state);

        window.location.href = ('https://accounts.spotify.com/authorize/?' + auth_query_parameters.toString());
      },
      generateRandomString(length) {
        var text = '';
        var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';

        for (var i = 0; i < length; i++) {
          text += possible.charAt(Math.floor(Math.random() * possible.length));
        }
        return text;
      },
      async getAccessToken() {

        // const payload = {
        //   method: 'POST',
        //   headers: {
        //     'Content-Type': 'application/x-www-form-urlencoded'
        //   },
        //   body: new URLSearchParams({
        //     grant_type: 'refresh_token',
        //     refresh_token: this.refresh_token,
        //     client_id: this.client_id
        //   }),
        // }

        // const body = await fetch(url, payload);
        // console.log(body);

        // const response = await body.json();

        const combinedString = `${this.client_id}:${this.client_secret}`;
        const url = "https://accounts.spotify.com/api/token";
        const basic = btoa(combinedString);
        const params = {
          grant_type: 'refresh_token',
          refresh_token: this.refresh_token
        }
        const encodedParams = Object.keys(params).map(key => {
          return encodeURIComponent(key) + '=' + encodeURIComponent(params[key]);
        });
        const queryString = encodedParams.join('&');

        const response = await fetch(url, {
          method:'POST',
          headers: {
            Authorization: `Basic ${basic}`,
            'Content-Type': 'application/x-www-form-urlencoded',
          },
          body: queryString
        })

        const data = await response.json();

        console.log(data);

        this.access_token = data.access_token;

        localStorage.setItem('access_token', data.access_token);
      },
      async getNowPlaying(access_token) {
        try {
          const response = await fetch(this.now_playing_endpoint, {
            headers: {
              Authorization: `Bearer ${access_token}`,
            }
          })

          if (response.status > 400) {
            throw new Error('Unable to Fetch Song');
          } else if(response.status === 204) { //The response was fetched but there was no content
            throw new Error('Currently Not Playing')
          }

          const song = await response.json()
          const albumImageUrl = song.item.album.images[0].url;
          const artist = song.item.artists.map((artist) => artist.name).join(', ');
          console.log(song);
          const isPlaying = song.is_playing;
          const songUrl = song.item.external_urls.spotify;
          const title = song.item.name;
          const timePlayed = song.progress_ms;
          const timeTotal = song.item.duration_ms;
          const artistUrl = song.item.album.artists[0].external_urls.spotify;

          this.music_player.albumImageUrl = albumImageUrl;
          this.music_player.artist = artist;
          this.music_player.songUrl = songUrl;
          this.music_player.title = title;
          this.music_player.timePlayed = timePlayed;
          this.music_player.timeTotal = timeTotal;
          this.music_player.artistUrl = artistUrl;
          this.music_player.isPlaying = isPlaying;
          
          console.log(this.music_player);
          this.settingValue();
        } catch (error) {
          console.log(error);
        }
      },
      settingValue() {
        console.log(`Hello World`);
        this.playerState = this.music_player.isPlaying ? 'PLAY' : 'PAUSE';

        //Converting the playback duration from seconds to minutes and seconds
        this.secondsPlayed = Math.floor(this.music_player.timePlayed / 1000);

        this.minutesPlayed = Math.floor(this.secondsPlayed / 60);

        this.secondsPlayed = this.secondsPlayed % 60;

        //Converting the song duration from seconds to minutes and seconds

        this.secondsTotal = Math.floor(this.music_player.timeTotal / 1000);

        this.minutesTotal = Math.floor(this.secondsTotal / 60);

        this.secondsTotal = this.secondsTotal % 60;

        this.albumImageUrl = this.music_player.albumImageUrl;

        this.title = this.music_player.title;
        
        this.artist = this.music_player.artist;
      },
      pad(n) {
        return (n < 10) ? ("0" + n) : n;
      },
      playingTime() {
        return `${this.pad(this.minutesPlayed)}:${this.pad(this.secondsPlayed)} / ${this.pad(this.minutesTotal)}:${this.pad(this.secondsTotal)}`
      },
      onLoadAnimation() {
        console.log('onLoadAnimation');
        setTimeout(() => {
          document.querySelector('.db-site-loader').classList.remove('--show');
          document.querySelector('.db-section--banner').classList.add('--animate-now');
          document.querySelector('.db-header').classList.add('--animate-now');
        }, 3000);
      },
      widgetDragScroll() {
        var widgetContainer = this.$refs.widgetContainer;

        let startY, scrollTop, isDown;
        let self = this;

        widgetContainer.addEventListener('mousedown', e => mouseIsDown(e));  
        widgetContainer.addEventListener('mouseup', e => mouseUp(e));
        widgetContainer.addEventListener('mouseleave', e => mouseLeave(e));
        widgetContainer.addEventListener('mousemove', e => mouseMove(e));

        function mouseIsDown (e) {
          isDown = true;
          startY = e.pageY - widgetContainer.offsetTop;
          scrollTop = widgetContainer.scrollTop;
          self.widgetSettings.scrollValue = scrollTop;
        }

        function mouseUp (e) {
          isDown = false;
        }

        function mouseLeave (e) {
          isDown = false;
        }

        function mouseMove (e) {
          if (isDown) {
            e.preventDefault();
            const y = e.pageY - widgetContainer.offsetTop;
            const walkY = y - startY;
            widgetContainer.scrollTop = scrollTop - walkY;
            self.widgetSettings.scrollValue = scrollTop;
            widgetContainer.classList.add('--dragging');
          }
          else {
            widgetContainer.classList.remove('--dragging');
          }
        }
      },
      widgetScrollUp() {
        var widgetContainer = this.$refs.widgetContainer;

        let self = this;
        let scrollTop = widgetContainer.scrollTop;
        widgetContainer.scrollTop = scrollTop - 100;
      },
      widgetScrollDown() {
        var widgetContainer = this.$refs.widgetContainer;

        let self = this;
        let scrollTop = widgetContainer.scrollTop;
        widgetContainer.scrollTop = scrollTop + 100;
      },
    }
  };

  Vue.createApp(DB_Page_Home_Options).mount('.db-page--home');
</script>